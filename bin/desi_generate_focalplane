#!/usr/bin/env python
"""Commandline script to create a focalplane model.
"""

import argparse

from desimodel.inputs.focalplane import create


def main():
    parser = argparse.ArgumentParser()

    parser.add_argument("--pos_settings", type=str, default=None,
                        required=False,
                        help="The directory containing the positioner "
                        "settings files.  For example, DESI svn "
                        "fp_settings/pos_settings.  The file names are "
                        "assumed to have the form unit_<name>.conf.  Only "
                        "devices with an assigned PETAL_ID and DEVICE_LOC "
                        "are considered.")

    parser.add_argument("--collision", type=str, default=None,
                        required=False,
                        help="The text config file containing the exclusion "
                        "polygons to use.  For example, "
                        "'_collision_settings_DEFAULT.conf'")

    parser.add_argument("--exclusion", type=str, default="legacy",
                        required=False,
                        help="The name of the default exclusion polygon"
                        " to use (e.g. 'legacy', 'default', etc)")

    parser.add_argument("--petal_id2loc", type=str, required=False,
                        help="Mapping of petal ID to focalplane location, "
                        "specified as '<id0>:<loc0>,<id1>:<loc1>,...'.  If"
                        " not specified, petals will be placed in ID order"
                        " starting at location 0.")

    parser.add_argument("--startvalid", type=str, required=False, default=None,
                        help="Optional start date (default is current "
                        "date/time) when the focalplane becomes valid. "
                        "Format is YYYY-MM-DDTHH:mm:ss in UTC time.")

    parser.add_argument("--fillfake", required=False, default=False,
                        action="store_true",
                        help="For simulations, fill empty device locations"
                        " with fake positioners")

    parser.add_argument("--test", type=str, required=False, default=None,
                        help="Override the output directory for testing.")

    parser.add_argument("--fakeoffset", required=False, default=False,
                        action="store_true",
                        help="Set theta / phi offsets to zero for fake"
                        " positioners.  This is *only* for consistency tests"
                        " with legacy fiberassignment and should not be used"
                        " for anything else.")

    parser.add_argument("--fakefiberpos", required=False, default=False,
                        action="store_true",
                        help="Use the old fiberpos file for the device "
                        "mapping.  Only for testing.")

    args = parser.parse_args()

    petalloc = None
    if args.petal_id2loc is not None:
        petalloc = dict()
        ptl = args.petal_id2loc.split(",")
        for pt in ptl:
            k, v = pt.split(':')
            petalloc[int(k)] = int(v)

    create(testdir=args.test, posdir=args.pos_settings,
           polyfile=args.collision, fibermaps=None, petalloc=petalloc,
           startvalid=args.startvalid, fillfake=args.fillfake,
           exclusion=args.exclusion, fakeoffset=args.fakeoffset,
           fakefiberpos=args.fakefiberpos)

    return


if __name__ == "__main__":
    main()
